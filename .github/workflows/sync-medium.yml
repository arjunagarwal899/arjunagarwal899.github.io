name: "Sync Medium Posts"

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-medium.yml'

permissions:
  contents: write

jobs:
  sync-medium:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install xml2js node-fetch@2 date-fns
          
      - name: Create sync script
        run: |
          cat > sync-medium.js << 'EOF'
          const fetch = require('node-fetch');
          const xml2js = require('xml2js');
          const fs = require('fs');
          const path = require('path');
          
          // Configuration
          const MEDIUM_USERNAME = 'arjunagarwal899';
          const MAX_POSTS_TO_SYNC = 50; // Limit to prevent overwhelming
          const MIN_EXCERPT_LENGTH = 100;
          const MAX_EXCERPT_LENGTH = 300;
          
          // Helper function to clean text
          function cleanText(text) {
            return text
              .replace(/<[^>]*>/g, '') // Remove HTML tags
              .replace(/&nbsp;/g, ' ')
              .replace(/&amp;/g, '&')
              .replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>')
              .replace(/&quot;/g, '"')
              .replace(/&#39;/g, "'")
              .replace(/\s+/g, ' ') // Normalize whitespace
              .trim();
          }
          
          // Helper function to create slug
          function createSlug(title) {
            return title.toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .trim();
          }
          
          // Helper function to extract categories/tags
          function extractTags(item) {
            const tags = [];
            if (item.category) {
              if (Array.isArray(item.category)) {
                tags.push(...item.category);
              } else {
                tags.push(item.category);
              }
            }
            
            // Add some default tags
            tags.push('Medium', 'Blog');
            
            // Remove duplicates and clean
            return [...new Set(tags)]
              .map(tag => tag.replace(/"/g, '\\"'))
              .filter(tag => tag.length > 0);
          }
          
          async function syncMediumPosts() {
            try {
              console.log('üöÄ Starting Medium posts sync...');
              console.log('üìù Medium username:', MEDIUM_USERNAME);
              
              const headers = {
                'User-Agent': 'Mozilla/5.0 (compatible; GitHubActions/1.0; +https://github.com/features/actions)',
                'Accept': 'application/rss+xml, application/xml, text/xml, application/json',
                'Accept-Language': 'en-US,en;q=0.9',
                'Cache-Control': 'no-cache'
              };
              
              const rssUrls = [
                {
                  name: 'RSS2JSON API (Primary)',
                  url: `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(`https://medium.com/feed/@${MEDIUM_USERNAME}`)}`,
                  type: 'json'
                },
                {
                  name: 'Direct Medium RSS',
                  url: `https://medium.com/feed/@${MEDIUM_USERNAME}`,
                  type: 'xml'
                },
                {
                  name: 'Alternative Medium Format',
                  url: `https://${MEDIUM_USERNAME}.medium.com/feed`,
                  type: 'xml'
                }
              ];
              
              let response;
              let responseData;
              let items = [];
              let successfulUrl = null;
              
              // Try each URL until one works
              for (const rssConfig of rssUrls) {
                try {
                  console.log(`üîÑ Trying: ${rssConfig.name}`);
                  console.log(`   URL: ${rssConfig.url}`);
                  
                  const startTime = Date.now();
                  response = await fetch(rssConfig.url, { 
                    headers: headers,
                    timeout: 30000 // 30 second timeout
                  });
                  const duration = Date.now() - startTime;
                  
                  if (response.ok) {
                    console.log(`‚úÖ Success! Status: ${response.status} (${duration}ms)`);
                    responseData = await response.text();
                    successfulUrl = rssConfig;
                    break;
                  } else {
                    console.log(`‚ùå Failed with status ${response.status}: ${response.statusText}`);
                  }
                } catch (error) {
                  console.log(`üí• Error with ${rssConfig.name}: ${error.message}`);
                }
              }
              
              if (!response || !response.ok) {
                throw new Error('All RSS feed URLs failed. Please check your Medium profile URL and ensure it\'s public.');
              }
              
              console.log(`üì° Using: ${successfulUrl.name}`);
              
              // Parse the response based on type
              if (successfulUrl.type === 'json') {
                console.log('üìÑ Parsing JSON response...');
                const jsonData = JSON.parse(responseData);
                
                if (jsonData.status !== 'ok') {
                  throw new Error(`RSS2JSON API error: ${jsonData.message || 'Unknown error'}`);
                }
                
                items = jsonData.items.slice(0, MAX_POSTS_TO_SYNC).map(item => ({
                  title: [item.title],
                  link: [item.link],
                  pubDate: [item.pubDate],
                  description: [item.description || item.content || ''],
                  category: item.categories || [],
                  guid: [item.guid || item.link]
                }));
              } else {
                console.log('üìÑ Parsing XML response...');
                const parser = new xml2js.Parser();
                const result = await parser.parseStringPromise(responseData);
                
                if (!result.rss || !result.rss.channel || !result.rss.channel[0].item) {
                  throw new Error('Invalid RSS XML structure');
                }
                
                items = result.rss.channel[0].item.slice(0, MAX_POSTS_TO_SYNC);
              }
              
              console.log(`üìä Found ${items.length} posts to process`);
              
              // Ensure _posts directory exists
              const postsDir = '_posts';
              if (!fs.existsSync(postsDir)) {
                console.log('üìÅ Creating _posts directory...');
                fs.mkdirSync(postsDir, { recursive: true });
              }
              
              let newPosts = 0;
              let skippedPosts = 0;
              let errorPosts = 0;
              
              // Process each post
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                
                try {
                  const title = cleanText(item.title[0]);
                  const link = item.link[0];
                  const pubDate = new Date(item.pubDate[0]);
                  const description = cleanText(item.description[0]);
                  const guid = item.guid ? item.guid[0] : link;
                  
                  // Validate required fields
                  if (!title || !link || !pubDate || isNaN(pubDate.getTime())) {
                    console.log(`‚ö†Ô∏è  Skipping post ${i + 1}: Missing required fields`);
                    errorPosts++;
                    continue;
                  }
                  
                  // Create excerpt with proper length
                  let excerpt = description.substring(0, MAX_EXCERPT_LENGTH);
                  if (excerpt.length < MIN_EXCERPT_LENGTH && description.length > excerpt.length) {
                    excerpt = description.substring(0, Math.min(description.length, MAX_EXCERPT_LENGTH * 2));
                  }
                  if (excerpt.length < description.length) {
                    excerpt += '...';
                  }
                  
                  // Create filename
                  const dateStr = pubDate.toISOString().split('T')[0];
                  const slug = createSlug(title);
                  const filename = `${dateStr}-${slug}.md`;
                  const filepath = path.join(postsDir, filename);
                  
                  // Skip if post already exists
                  if (fs.existsSync(filepath)) {
                    console.log(`‚è≠Ô∏è  Post already exists: ${filename}`);
                    skippedPosts++;
                    continue;
                  }
                  
                  // Extract and clean tags
                  const tags = extractTags(item);
                  const tagsString = tags.map(tag => `"${tag}"`).join(', ');
                  
                  // Create Jekyll front matter
                  const frontMatter = `---
layout: post
title: "${title.replace(/"/g, '\\"').replace(/:/g, '\\:')}"
date: ${pubDate.toISOString()}
categories: [Medium, Blog]
tags: [${tagsString}]
external_url: "${link}"
excerpt: "${excerpt.replace(/"/g, '\\"').replace(/:/g, '\\:').replace(/\n/g, ' ')}"
medium_post: true
author: "Arjun Agarwal"
---

This post was originally published on [Medium](${link}).

${excerpt}

[Continue reading on Medium ‚Üí](${link})
`;
                  
                  // Write the file
                  fs.writeFileSync(filepath, frontMatter);
                  console.log(`‚ú® Created: ${filename}`);
                  console.log(`   Title: ${title}`);
                  console.log(`   Date: ${pubDate.toDateString()}`);
                  console.log(`   Tags: ${tags.join(', ')}`);
                  newPosts++;
                  
                } catch (error) {
                  console.error(`üí• Error processing post ${i + 1}:`, error.message);
                  errorPosts++;
                }
              }
              
              // Summary
              console.log('\nüìà Sync Summary:');
              console.log(`   ‚ú® New posts created: ${newPosts}`);
              console.log(`   ‚è≠Ô∏è  Posts skipped (already exist): ${skippedPosts}`);
              console.log(`   üí• Posts with errors: ${errorPosts}`);
              console.log(`   üìä Total posts processed: ${items.length}`);
              
              if (newPosts > 0) {
                console.log('\nüéâ Sync completed successfully with new posts!');
              } else if (skippedPosts > 0) {
                console.log('\n‚úÖ Sync completed - all posts were already up to date');
              } else {
                console.log('\n‚ö†Ô∏è  No posts were processed - please check your Medium profile');
              }
              
            } catch (error) {
              console.error('\nüí• Fatal error during sync:', error.message);
              console.error('Stack trace:', error.stack);
              
              // Provide helpful debugging information
              console.log('\nüîç Debugging Information:');
              console.log(`   Medium Username: ${MEDIUM_USERNAME}`);
              console.log(`   Expected RSS URL: https://medium.com/feed/@${MEDIUM_USERNAME}`);
              console.log(`   Current working directory: ${process.cwd()}`);
              console.log(`   Node.js version: ${process.version}`);
              
              process.exit(1);
            }
          }
          
          // Run the sync
          syncMediumPosts();
          EOF
          
      - name: Run sync script
        run: |
          echo "üöÄ Starting Medium sync process..."
          node sync-medium.js
          
      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain _posts/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üìù Changes detected in _posts directory"
            git status --porcelain _posts/
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected"
          fi
          
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Medium Sync"
          
          # Add only the _posts directory
          git add _posts/
          
          # Create a detailed commit message
          NEW_POSTS=$(git diff --cached --name-only | wc -l)
          
          if [ "$NEW_POSTS" -eq 1 ]; then
            COMMIT_MSG="üìù Add new Medium post"
          else
            COMMIT_MSG="üìù Add $NEW_POSTS new Medium posts"
          fi
          
          # Add file names to commit message
          echo "$COMMIT_MSG" > commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Posts added:" >> commit_msg.txt
          git diff --cached --name-only | sed 's/^_posts\//- /' >> commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Auto-synced from Medium RSS feed" >> commit_msg.txt
          echo "[skip ci]" >> commit_msg.txt
          
          git commit -F commit_msg.txt
          git push
          
          echo "‚úÖ Successfully committed and pushed $NEW_POSTS new posts"
          
      - name: Summary
        run: |
          echo "üèÅ Medium sync workflow completed!"
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            echo "‚ú® New posts were added and pushed to the repository"
            echo "üåê They will appear on your website after the next build"
          else
            echo "‚úÖ No new posts found - your blog is up to date"
          fi
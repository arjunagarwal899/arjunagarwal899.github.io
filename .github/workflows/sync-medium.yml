name: "Sync Medium Posts"

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-medium.yml'

jobs:
  sync-medium:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install xml2js node-fetch@2
          
      - name: Create sync script
        run: |
          cat > sync-medium.js << 'EOF'
          const fetch = require('node-fetch');
          const xml2js = require('xml2js');
          const fs = require('fs');
          const path = require('path');
          
          async function syncMediumPosts() {
            try {
              console.log('Fetching Medium RSS feed...');
              const response = await fetch('https://medium.com/feed/@arjunagarwal899');
              
              if (!response.ok) {
                throw new Error('Failed to fetch RSS feed: ' + response.status);
              }
              
              const xmlData = await response.text();
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(xmlData);
              
              const items = result.rss.channel[0].item || [];
              console.log('Found ' + items.length + ' posts');
              
              // Ensure _posts directory exists
              const postsDir = '_posts';
              if (!fs.existsSync(postsDir)) {
                fs.mkdirSync(postsDir, { recursive: true });
              }
              
              let newPosts = 0;
              
              // Process each post
              for (const item of items) {
                const title = item.title[0];
                const link = item.link[0];
                const pubDate = new Date(item.pubDate[0]);
                const description = item.description[0];
                const categories = item.category || [];
                
                // Clean up excerpt
                const excerpt = description
                  .replace(/<[^>]*>/g, '')
                  .replace(/&nbsp;/g, ' ')
                  .replace(/&amp;/g, '&')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                  .replace(/&quot;/g, '"')
                  .substring(0, 200) + '...';
                
                // Create filename
                const dateStr = pubDate.toISOString().split('T')[0];
                const slug = title.toLowerCase()
                  .replace(/[^a-z0-9\s-]/g, '')
                  .replace(/\s+/g, '-')
                  .replace(/-+/g, '-')
                  .trim();
                const filename = dateStr + '-' + slug + '.md';
                const filepath = path.join(postsDir, filename);
                
                // Skip if post already exists
                if (fs.existsSync(filepath)) {
                  console.log('Post already exists: ' + filename);
                  continue;
                }
                
                // Create tags array
                const tags = categories.map(cat => '"' + cat.replace(/"/g, '\\"') + '"').join(', ');
                
                // Create Jekyll front matter
                const frontMatter = '---\n' +
                  'layout: post\n' +
                  'title: "' + title.replace(/"/g, '\\"') + '"\n' +
                  'date: ' + pubDate.toISOString() + '\n' +
                  'categories: [Medium, Blog]\n' +
                  'tags: [' + tags + ']\n' +
                  'external_url: "' + link + '"\n' +
                  'excerpt: "' + excerpt.replace(/"/g, '\\"') + '"\n' +
                  'medium_post: true\n' +
                  '---\n\n' +
                  'This post was originally published on [Medium](' + link + ').\n\n' +
                  excerpt + '\n\n' +
                  '[Continue reading on Medium â†’](' + link + ')\n';
                
                // Write the file
                fs.writeFileSync(filepath, frontMatter);
                console.log('Created post: ' + filename);
                newPosts++;
              }
              
              console.log('Sync completed. New posts: ' + newPosts);
              
            } catch (error) {
              console.error('Error syncing Medium posts:', error.message);
              process.exit(1);
            }
          }
          
          syncMediumPosts();
          EOF
          
      - name: Run sync script
        run: node sync-medium.js
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _posts/
          if git diff --staged --quiet; then
            echo "No new posts to commit"
          else
            git commit -m "Auto-sync Medium posts [skip ci]"
            git push
          fi
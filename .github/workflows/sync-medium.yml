name: "Sync Medium Posts"

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-medium.yml'

jobs:
  sync-medium:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install xml2js node-fetch@2
          
      - name: Create sync script
        run: |
          cat > sync-medium.js << 'EOF'
          const fetch = require('node-fetch');
          const xml2js = require('xml2js');
          const fs = require('fs');
          const path = require('path');
          
          async function syncMediumPosts() {
            try {
              console.log('üöÄ Starting Medium posts sync...');
              
              const headers = {
                'User-Agent': 'Mozilla/5.0 (compatible; GitHubActions/1.0; +https://agarwalarjun.com)',
                'Accept': 'application/rss+xml, application/xml, text/xml, application/json',
                'Accept-Language': 'en-US,en;q=0.9'
              };
              
              // Try multiple RSS sources
              const rssUrls = [
                'https://medium.com/feed/@arjunagarwal899',
                'https://api.rss2json.com/v1/api.json?rss_url=https%3A//medium.com/feed/@arjunagarwal899&count=20'
              ];
              
              let response;
              let isJsonResponse = false;
              let feedData;
              
              for (const url of rssUrls) {
                try {
                  console.log(`üì° Trying: ${url}`);
                  response = await fetch(url, { 
                    headers: headers,
                    timeout: 10000 
                  });
                  
                  if (response.ok) {
                    isJsonResponse = url.includes('rss2json.com');
                    feedData = await response.text();
                    console.log(`‚úÖ Success with: ${url}`);
                    break;
                  } else {
                    console.log(`‚ùå Failed with status ${response.status}: ${url}`);
                  }
                } catch (error) {
                  console.log(`‚ö†Ô∏è Error with ${url}: ${error.message}`);
                }
              }
              
              if (!response || !response.ok) {
                throw new Error('All RSS feed URLs failed');
              }
              
              let items = [];
              
              if (isJsonResponse) {
                const jsonData = JSON.parse(feedData);
                if (jsonData.status === 'ok' && jsonData.items) {
                  items = jsonData.items.map(item => ({
                    title: [item.title],
                    link: [item.link],
                    pubDate: [item.pubDate],
                    description: [item.description || item.content || ''],
                    category: item.categories || [],
                    guid: [item.guid || item.link]
                  }));
                } else {
                  throw new Error(`RSS2JSON API error: ${jsonData.message || 'Unknown error'}`);
                }
              } else {
                const parser = new xml2js.Parser();
                const result = await parser.parseStringPromise(feedData);
                items = result.rss.channel[0].item || [];
              }
              
              console.log(`üìö Found ${items.length} posts`);
              
              // Ensure _posts directory exists
              const postsDir = '_posts';
              if (!fs.existsSync(postsDir)) {
                fs.mkdirSync(postsDir, { recursive: true });
              }
              
              let newPosts = 0;
              let updatedPosts = 0;
              
              // Process each post
              for (const item of items) {
                try {
                  const title = item.title[0];
                  const link = item.link[0];
                  const pubDate = new Date(item.pubDate[0]);
                  const description = item.description[0];
                  const categories = Array.isArray(item.category) ? item.category : [];
                  
                  // Skip if invalid data
                  if (!title || !link || isNaN(pubDate.getTime())) {
                    console.log(`‚ö†Ô∏è Skipping post with invalid data: ${title || 'Unknown'}`);
                    continue;
                  }
                  
                  // Clean up excerpt
                  const excerpt = description
                    .replace(/<[^>]*>/g, '')
                    .replace(/&nbsp;/g, ' ')
                    .replace(/&amp;/g, '&')
                    .replace(/&lt;/g, '<')
                    .replace(/&gt;/g, '>')
                    .replace(/&quot;/g, '"')
                    .replace(/\s+/g, ' ')
                    .trim()
                    .substring(0, 200);
                  
                  // Create filename
                  const dateStr = pubDate.toISOString().split('T')[0];
                  const slug = title.toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-+|-+$/g, '')
                    .substring(0, 50);
                  
                  const filename = `${dateStr}-${slug}.md`;
                  const filepath = path.join(postsDir, filename);
                  
                  // Create tags array
                  const validCategories = categories.filter(cat => cat && typeof cat === 'string');
                  const tags = validCategories.map(cat => `"${cat.replace(/"/g, '\\"')}"`).join(', ');
                  
                  // Create Jekyll front matter
                  const frontMatter = `---
layout: post
title: "${title.replace(/"/g, '\\"')}"
date: ${pubDate.toISOString()}
categories: [Medium, Blog]
tags: [${tags}]
external_url: "${link}"
excerpt: "${excerpt.replace(/"/g, '\\"')}${excerpt.length >= 200 ? '...' : ''}"
medium_post: true
author: Arjun Agarwal
---

This post was originally published on [Medium](${link}).

${excerpt}${excerpt.length >= 200 ? '...' : ''}

[Continue reading on Medium ‚Üí](${link})
`;
                  
                  // Check if post exists and if content has changed
                  if (fs.existsSync(filepath)) {
                    const existingContent = fs.readFileSync(filepath, 'utf8');
                    if (existingContent !== frontMatter) {
                      fs.writeFileSync(filepath, frontMatter);
                      console.log(`üîÑ Updated post: ${filename}`);
                      updatedPosts++;
                    } else {
                      console.log(`‚úì Post unchanged: ${filename}`);
                    }
                  } else {
                    fs.writeFileSync(filepath, frontMatter);
                    console.log(`üìù Created new post: ${filename}`);
                    newPosts++;
                  }
                  
                } catch (error) {
                  console.log(`‚ö†Ô∏è Error processing post: ${error.message}`);
                }
              }
              
              console.log(`\nüéâ Sync completed!`);
              console.log(`üìù New posts: ${newPosts}`);
              console.log(`üîÑ Updated posts: ${updatedPosts}`);
              console.log(`üìö Total posts processed: ${items.length}`);
              
            } catch (error) {
              console.error('üí• Error syncing Medium posts:', error.message);
              console.error('Stack trace:', error.stack);
              process.exit(1);
            }
          }
          
          syncMediumPosts();
          EOF
          
      - name: Run sync script
        run: node sync-medium.js
        
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _posts/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "üìù No changes to commit"
          else
            # Get the number of staged files
            CHANGED_FILES=$(git diff --staged --name-only | wc -l)
            git commit -m "ü§ñ Auto-sync Medium posts: ${CHANGED_FILES} file(s) updated [skip ci]"
            git push
            echo "‚úÖ Successfully pushed ${CHANGED_FILES} updated post(s)"
          fi